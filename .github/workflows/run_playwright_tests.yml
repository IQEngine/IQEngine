---
name: Run Playwright frontend integration tests

on:
  pull_request:
    # only runs on PRs that target main
    branches:
      - main
  workflow_dispatch:

jobs:
  playwright:
    name: RunPlaywrightTests
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: e2e
        run: npm ci

      # - name: Create dotenv
      #   run: |
      #     export IQENGINE_CONNECTION_INFO=$'{"settings": [{"name": "GNU Radio SigMF Repo", "containerName": "iqengine", "accountName": "gnuradio", "sasToken": "sp=rl&st=2023-06-13T05:15:42Z&se=2023-08-13T13:15:42Z&sv=2022-11-02&sr=c&sig=uN1wVKFNVeNPmAYY%2By9lBxpyBDq29j2SaIexUGxOVbo%3D", "description": "A collection of example SigMF recordings hosted by the GNU Radio project (contact Marc to have your recordings added)", "imageURL": "https://gnuradio.blob.core.windows.net/iqengine/cellular_downlink_880MHz.jpeg " }, {"name": "Daniel Estévez\' Recordings", "containerName": "estevez", "accountName": "gnuradio", "sasToken": "sp=rl&st=2023-06-13T05:16:31Z&se=2023-08-13T13:16:31Z&sv=2022-11-02&sr=c&sig=2Id1EL13t%2BDf7feESmada7e619cusGGrFaeYgfWtcH8%3D", "description": "Daniel Estévez\'s Satellite and Radioastronomy RF Recordings, for more info see https://destevez.net/rf-recordings/  ", "imageURL": "https://avatars.githubusercontent.com/u/15093841?v=4 " }, {"name": "Northeastern University", "containerName": "northeastern", "accountName": "gnuradio", "sasToken": "sp=rl&st=2023-06-13T05:17:00Z&se=2023-08-13T13:17:00Z&sv=2022-11-02&sr=c&sig=ks7FA%2FRU4MR9q5Aqng%2FcSVqOzMMgdM0K3AdduYrP%2FiU%3D", "description": "Includes the Dataset for RF Fingerprinting on the POWDER Platform https://genesys-lab.org/powder  ", "imageURL": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Northeastern_seal.svg/480px-Northeastern_seal.svg.png " } ]}'
      #     echo 'IQENGINE_CONNECTION_INFO = ${IQENGINE_CONNECTION_INFO}' > .env
      #     cat .env

      - name: Docker build
        run: |
          docker compose -f docker-compose-e2e.yml build
        env:
          IN_MEMORY_DB: "0"
          IQENGINE_FEATURE_FLAGS: '{"useAPIDatasources": true}'
          MONGO_USERNAME: mongoadmin
          MONGO_PASSWORD: secret

      - name: Docker up
        run: docker compose -f docker-compose-e2e.yml up &
        env:
          MONGO_USERNAME: mongoadmin
          MONGO_PASSWORD: secret

      - name: Check build has succeeded
        uses: cygnetdigital/wait_for_response@v2.0.0
        with:
          url: 'http://localhost:3000/'
          responseCode: '200,500'
          timeout: 30000
          interval: 500

      - name: Install Playwright Browsers
        working-directory: e2e
        run: npx playwright install --with-deps

      - name: Display environment
        run: docker compose -f docker-compose-e2e.yml exec iqengine printenv
        env:
          MONGO_USERNAME: mongoadmin
          MONGO_PASSWORD: secret

      - name: Run Playwright tests
        working-directory: e2e
        run: npx playwright test --config playwright-pr.config.ts
        env:
          IQENGINE_METADATA_DB_CONNECTION_STRING: mongodb://mongoadmin:secret@localhost:27017/admin

      - name: Docker down
        run: docker compose -f docker-compose-e2e.yml down
